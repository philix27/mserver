generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                @id @default(autoincrement())
  firstname             String?
  lastname              String?
  middlename            String?
  email                 String?            @unique
  password              String?
  transaction_pin       String?
  // minipay_wallet    String?
  // minipay           Boolean?           @default(false)
  role                  UserRole?          @default(Regular)
  country               Country?
  created_at            DateTime?          @default(now())
  updated_at            DateTime?          @updatedAt
  bvn                   String?
  bvn_status            CredentialsStatus? @default(NONE)
  nin                   String?
  nin_status            CredentialsStatus? @default(NONE)
  home_address          String?
  phone                 String?
  phone_verified        Boolean?           @default(false)
  crypto_wallets        CryptoWallets[]
  bank_accounts         BankAccount[]
  //* Vendor
  merchant_success_rate Int?
  merchant_trade_count  Int?               @default(0)
  merchant_nickname     String?
  merchant_status       MerchantStatus?    @default(Offline)
  adverts               Adverts[]
  orders                Orders[]
  transactions          Transactions[]
  // orders_buy        OrdersBuy[]
}

enum MerchantStatus {
  Online
  Offline
  Wait
}

enum UserRole {
  Regular
  P2pMerchant
  CustomeSupport
}

enum Country {
  Nigeria
  Ghana
  Kenya
}

model CryptoWallets {
  id         Int       @id @default(autoincrement())
  address    String    @unique
  wallet_id  String?
  chainType  ChainType
  minipay    Boolean?  @default(false)
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  user_id    Int?
  user       User?     @relation(fields: [user_id], references: [id])
}

enum ChainType {
  Ethereum
  Solana
  Cosmos
}

enum CredentialsStatus {
  REVIEW
  VALID
  FAILED
  NONE
}

model BankAccount {
  id           Int       @id @default(autoincrement())
  account_name String
  account_no   String
  soft_delete  Boolean?  @default(false)
  bank_name    BankName
  created_at   DateTime? @default(now())
  updated_at   DateTime? @updatedAt
  user_id      Int
  user         User?     @relation(fields: [user_id], references: [id])
  advert       Adverts[]
}

enum TradeType {
  BUY
  SELL
}

enum CurrencyCrypto {
  BTC
  CUSD
  ETH_USDT
  BASE_USDT
  ETH
}

enum CurrencyFiat {
  NGN
  GHS
  KES
}

// Buy and sell is always dependent on the crypto value
model Adverts {
  id                  Int            @id @default(autoincrement())
  rateFloat           Float?
  rateFixed           Float?
  isFloatRate         Boolean        @default(true)
  limitUpper          Float
  limitLower          Float
  fiatAmountPerCrypto Int
  tradeType           TradeType
  currency_crypto     CurrencyCrypto
  currency_fiat       CurrencyFiat
  instructions        String
  wallet_address      String
  status              AdvertStatus?  @default(OPEN)
  duration            String
  created_at          DateTime?      @default(now())
  updated_at          DateTime?      @updatedAt
  bank_accounts       BankAccount[]
  merchant_id         Int
  merchant            User?          @relation(fields: [merchant_id], references: [id])
}

enum AdvertStatus {
  OPEN
  CLOSE
}

model Orders {
  id                                    Int            @id @default(autoincrement())
  amount_fiat                           Float
  amount_crypto                         Float
  wallet_customer                       String
  wallet_merchant                       String
  estimated_duration                    String
  bank_account_name                     String
  bank_account_no                       String
  bank_name                             BankName
  currency_crypto                       CurrencyCrypto
  currency_fiat                         CurrencyFiat
  trade_type                            TradeType
  status                                OrderStatus    @default(PENDING)
  action_user                           OrderActions?
  action_merchant                       OrderActions?
  // ! fiat
  sell_txn_hash_customer_lock_crypto    String?
  sell_txn_hash_customer_release_crypto String?
  // ! fiat
  sell_time2_customer_lock_crypto       DateTime?
  sell_time1_customer_request           DateTime?
  sell_time3_merchant_send_fiat         DateTime?
  sell_time4_customer_release_crypto    DateTime?
  // ! open
  buy_time1_customer_request            DateTime?
  buy_time2_merchant_lock_crypto        DateTime?
  buy_time3_customer_send_fiat          DateTime?
  buy_time4_merchant_release_crypto     DateTime?
  buy_txn_hash_merchant_lock_crypto     String?
  buy_txn_hash_merchant_release_crypto  String?
  // ! open
  created_at                            DateTime?      @default(now())
  updated_at                            DateTime?      @updatedAt
  customer_id                           Int
  customer                              User?          @relation(fields: [customer_id], references: [id])
  merchant_id                           Int
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCEL
  APPEAL
}

enum OrderActions {
  LockCrypto
  FaitSent
  FaitReceived
  ReleaseCrypto
  Appeal
  Cancel
}

enum BankName {
  NG_ZENITH
  NG_GTB
  NG_UBA
  NG_FIDELITY
  NG_OPAY
  NG_MONIEPOINT
  NG_WEMA
  NG_UNITY
  NG_STERLING
  NG_STANBIC
  NG_LOTUS
  NG_KEYSTONE
  NG_JAIZ
  NG_KUDA
  NG_PALMPAY
  NG_ACCESS
  NG_FCMB
  NG_ECOBANK
  NG_FIRST
}

enum CurrencyType {
  FIAT
  CRYPTO
}

enum CurrencyName {
  NGN
  BTC
  CUSD
  USDT
  USDTx
  ETH
}

model ExchangeRates {
  id               Int       @id @default(autoincrement())
  rates            String?
  exchangeratesapi String?
  created_at       DateTime? @default(now())
  updated_at       DateTime? @updatedAt
}

enum AccessTokenPlatform {
  RELOADLY
}

model AccessTokens {
  id            Int                 @id @default(autoincrement())
  token         String
  platform      AccessTokenPlatform
  purpose       String?
  response_data String?
  created_at    DateTime?           @default(now())
  updated_at    DateTime?           @updatedAt
}

enum TransactionCategory {
  AIRTIME
  DATA_BUNDLE
  GIFT_CARD
}

enum TransactionsMode {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  COMPLETED
  PENDING
}

model Transactions {
  id         Int                  @id @default(autoincrement())
  amount     Float
  note       String
  category   TransactionCategory
  mode       TransactionsMode
  status     TransactionStatus
  created_at DateTime?            @default(now())
  updated_at DateTime?            @updatedAt
  user_id    Int?
  user       User?                @relation(fields: [user_id], references: [id])
}
