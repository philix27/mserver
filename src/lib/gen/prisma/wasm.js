
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  middlename: 'middlename',
  email: 'email',
  password: 'password',
  transaction_pin: 'transaction_pin',
  telegram_id: 'telegram_id',
  role: 'role',
  country_code: 'country_code',
  created_at: 'created_at',
  updated_at: 'updated_at',
  bvn: 'bvn',
  bvn_status: 'bvn_status',
  nin: 'nin',
  nin_status: 'nin_status',
  dob: 'dob',
  dob_status: 'dob_status',
  home_address: 'home_address',
  street_address: 'street_address',
  state: 'state',
  phone: 'phone',
  googleId: 'googleId',
  proof_of_address: 'proof_of_address',
  phone_verified: 'phone_verified'
};

exports.Prisma.CryptoWalletsScalarFieldEnum = {
  id: 'id',
  address: 'address',
  wallet_id: 'wallet_id',
  chainType: 'chainType',
  minipay: 'minipay',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_id: 'user_id'
};

exports.Prisma.BankAccountScalarFieldEnum = {
  id: 'id',
  account_name: 'account_name',
  account_no: 'account_no',
  soft_delete: 'soft_delete',
  bank_name: 'bank_name',
  nuban_id: 'nuban_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_id: 'user_id'
};

exports.Prisma.OrdersScalarFieldEnum = {
  id: 'id',
  amount_fiat: 'amount_fiat',
  amount_crypto: 'amount_crypto',
  wallet_customer: 'wallet_customer',
  wallet_merchant: 'wallet_merchant',
  estimated_duration: 'estimated_duration',
  txn_hash: 'txn_hash',
  mode: 'mode',
  currency_crypto: 'currency_crypto',
  currency_fiat: 'currency_fiat',
  trade_type: 'trade_type',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  bank_id: 'bank_id',
  user_id: 'user_id'
};

exports.Prisma.ExchangeRatesScalarFieldEnum = {
  id: 'id',
  rates: 'rates',
  exchangeratesapi: 'exchangeratesapi',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AccessTokensScalarFieldEnum = {
  id: 'id',
  token: 'token',
  platform: 'platform',
  purpose: 'purpose',
  response_data: 'response_data',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TransactionsScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  transaction_hash: 'transaction_hash',
  note: 'note',
  fiat_currency: 'fiat_currency',
  crypto_currency: 'crypto_currency',
  category: 'category',
  mode: 'mode',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_id: 'user_id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  Regular: 'Regular',
  P2pMerchant: 'P2pMerchant',
  CustomeSupport: 'CustomeSupport'
};

exports.CountryCode = exports.$Enums.CountryCode = {
  NG: 'NG',
  GH: 'GH',
  KE: 'KE',
  MW: 'MW',
  RW: 'RW',
  TZ: 'TZ',
  UG: 'UG',
  ZA: 'ZA'
};

exports.CredentialsStatus = exports.$Enums.CredentialsStatus = {
  REVIEW: 'REVIEW',
  VALID: 'VALID',
  FAILED: 'FAILED',
  NONE: 'NONE'
};

exports.ChainType = exports.$Enums.ChainType = {
  Ethereum: 'Ethereum',
  Solana: 'Solana',
  Cosmos: 'Cosmos'
};

exports.OrderMode = exports.$Enums.OrderMode = {
  MARKET: 'MARKET',
  EXPRESS: 'EXPRESS'
};

exports.TradeType = exports.$Enums.TradeType = {
  BUY: 'BUY',
  SELL: 'SELL'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  CANCEL: 'CANCEL',
  APPEAL: 'APPEAL'
};

exports.AccessTokenPlatform = exports.$Enums.AccessTokenPlatform = {
  RELOADLY: 'RELOADLY'
};

exports.TransactionCategory = exports.$Enums.TransactionCategory = {
  AIRTIME: 'AIRTIME',
  DATA_BUNDLE: 'DATA_BUNDLE',
  GIFT_CARD: 'GIFT_CARD',
  EXPRESS_EXCHANGE: 'EXPRESS_EXCHANGE',
  P2P_EXCHANGE: 'P2P_EXCHANGE',
  OFF_RAMPING: 'OFF_RAMPING',
  ON_RAMPING: 'ON_RAMPING',
  BETTING_WALLET: 'BETTING_WALLET',
  ELECTRICITY_BILL: 'ELECTRICITY_BILL',
  TV_BILL: 'TV_BILL',
  WATER_BILL: 'WATER_BILL',
  INTERNET_BILL: 'INTERNET_BILL'
};

exports.TransactionsMode = exports.$Enums.TransactionsMode = {
  CREDIT: 'CREDIT',
  DEBIT: 'DEBIT'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  COMPLETED: 'COMPLETED',
  PENDING: 'PENDING'
};

exports.Prisma.ModelName = {
  User: 'User',
  CryptoWallets: 'CryptoWallets',
  BankAccount: 'BankAccount',
  Orders: 'Orders',
  ExchangeRates: 'ExchangeRates',
  AccessTokens: 'AccessTokens',
  Transactions: 'Transactions'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
